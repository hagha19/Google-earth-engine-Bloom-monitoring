/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var poly2 = ee.FeatureCollection("users/hghanbariut/LP-Lakes");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var Clipimage = function(image) {
    return ee.Image(image.clip(poly2)).set('system:time_start', image.get('system:time_start'));
};
// Map.addLayer(poly2.filter(ee.Filter.eq('NAME','Smallwood Reservoir' )));
poly2 = poly2.map(function(f) {
  return f.buffer(20); // Note that the errorMargin is set to 100.
});
// print(poly2);

var Bloom = function(img1) {
  var H1 = (img1.select('B2_median').subtract(img1.select('B1_median'))).divide(img1.select('B3_median').add(img1.select('B2_median')).subtract(img1.select('B1_median').multiply(2)));
  var H2 = (img1.select('B3_median').subtract(img1.select('B1_median'))).divide(img1.select('B3_median').add(img1.select('B1_median')).subtract(img1.select('B2_median').multiply(2))).add(2);
  var H3 = (img1.select('B1_median').subtract(img1.select('B3_median'))).divide(img1.select('B2_median').add(img1.select('B1_median')).subtract(img1.select('B3_median').multiply(2))).add(1);
  var H = ((img1.select('B1_median').gt(img1.select('B2_median')).and(img1.select('B1_median').gt(img1.select('B3_median'))).multiply(H1)).add(
  img1.select('B2_median').gt(img1.select('B1_median')).and(img1.select('B2_median').gt(img1.select('B3_median'))).multiply(H2))).add(
    img1.select('B3_median').gt(img1.select('B2_median')).and(img1.select('B3_median').gt(img1.select('B1_median'))).multiply(H3));
  var F = H.gt(1.6);
  
  return F.multiply( img1.select('B4_median').subtract(img1.select('B5_median').multiply(1.03))).copyProperties(img1, ['system:time_start']);
};

var watermask = function(image) {
  var AWEI1 = (image.select('B2_median').subtract(image.select('B5_median'))).multiply(4);
  var AWEI2 = (image.select('B4_median').multiply(0.25)).add(image.select('B7_median').multiply(2.75));
  var AWEI = AWEI1.subtract(AWEI2);
  return AWEI.gt(0).copyProperties(image, ['system:time_start']);
};

var bloomdegree = function(image) {
  var AWEI1 = (image.select('B2_median').subtract(image.select('B5_median'))).multiply(4);
  var AWEI2 = (image.select('B4_median').multiply(0.25)).add(image.select('B7_median').multiply(2.75));
  var AWEI = AWEI1.subtract(AWEI2);
  var H1 = (image.select('B2_median').subtract(image.select('B1_median'))).divide(image.select('B3_median').add(image.select('B2_median')).subtract(image.select('B1_median').multiply(2)));
  var H2 = (image.select('B3_median').subtract(image.select('B1_median'))).divide(image.select('B3_median').add(image.select('B1_median')).subtract(image.select('B2_median').multiply(2))).add(2);
  var H3 = (image.select('B1_median').subtract(image.select('B3_median'))).divide(image.select('B2_median').add(image.select('B1_median')).subtract(image.select('B3_median').multiply(2))).add(1);
  var H = ((image.select('B1_median').gt(image.select('B2_median')).and(image.select('B1_median').gt(image.select('B3_median'))).multiply(H1)).add(
  image.select('B2_median').gt(image.select('B1_median')).and(image.select('B2_median').gt(image.select('B3_median'))).multiply(H2))).add(
    image.select('B3_median').gt(image.select('B2_median')).and(image.select('B3_median').gt(image.select('B1_median'))).multiply(H3));
  var W = AWEI.gt(0);
  var F = H.gt(1.6);  
  var b = F.multiply( image.select('B4_median').subtract(image.select('B5_median').multiply(1.03)));
  var img = b.multiply(W);

  return img.copyProperties(image, ['system:time_start']);

};

var mean_area = function(wmask){
    var Area = wmask.float().reduceRegion({reducer: ee.Reducer.sum(),geometry: wmask.geometry(),scale: 30,
      maxPixels: 1e13
    });
    return Area;
};

var doyList = ee.List.sequence(1985, 2010);

var ndviCol =  ee.ImageCollection("LANDSAT/LT05/C01/T1_TOA").filter(ee.Filter.calendarRange(6,7 , 'month'));
// Map over the list of days to build a list of image composites.
var ndviCompList = doyList.map(function(starty) {
  // Ensure that startDoy is a number.
  starty = ee.Number(starty);

  // Filter images by date range; starting with the current startDate and
  // ending 15 days later. Reduce the resulting image collection by median.
  return ndviCol
    .filter(ee.Filter.calendarRange(starty, starty.add(1), 'year'))
    .reduce(ee.Reducer.median()).copyProperties(ndviCol
    .filter(ee.Filter.calendarRange(starty, starty.add(1), 'year')).first(), ['system:time_start']);
});
print(ndviCompList);
// Convert the image List to an ImageCollection.
var ndviCompCol = ee.ImageCollection.fromImages(ndviCompList).set('system:time_start', ndviCol.get('system:time_start'));
var clipped = ndviCompCol.map(Clipimage);
print('clipped', clipped);

var bloom = clipped.map(Bloom);
var wmask = clipped.map(watermask);
var Bmean = clipped.map(bloomdegree);
print('bloom' , Bmean);
print('wmask',wmask);

var Imagefirst  = ee.Image(ndviCompCol.toList(ndviCompCol.size()).get(25))
var maskfirst  = ee.Image(wmask.toList(wmask.size()).get(25))
var Bmeanfirst  = ee.Image(Bmean.toList(Bmean.size()).get(25))

// var maskfirst  = wmask.first() 
// var Bmeanfirst  = Bmean.first() wmask.toList(wmask.size()).get(10)
  print("maskfirst" , maskfirst)
  
var scale_def = maskfirst.projection().nominalScale();


var areas = poly2 // When developing, it's convenient to speed things up by limiting the amount of data to work with
  .map(function (feature) {
    var area = maskfirst.reduceRegion({
      reducer: ee.Reducer.sum(),
      geometry: feature.geometry(),
      scale: 30,
      maxPixels: 1e12 // Some of the areas are large and have more pixels than 1e9
    }).getNumber('B2_median')
    var bloom = Bmeanfirst.reduceRegion({
      reducer: ee.Reducer.sum(),
      geometry: feature.geometry(),
      scale: 30,
      maxPixels: 1e12 // Some of the areas are large and have more pixels than 1e9
    }).getNumber('B1_median').divide(area);
    var cloudyIm = Imagefirst.clip(feature);
    var scored = ee.Algorithms.Landsat.simpleCloudScore(cloudyIm);
    return ee.Feature(feature.geometry(), {AREA: area, BLOOM:bloom,CloudScore : scored, BIOME: feature.get('NAME')});
  }) // Results in a FeatureCollection with AREA and BIOME, one feature for each feature in resolve
// Map.addLayer(poly2.limit(2))
// Map.addLayer(maskfirst)
// Map.addLayer(wmask.limit(1),{palette: ['000000','00FF00','0000FF']})

print(ee.Date(ee.Image(maskfirst).get('system:time_start')).format('YYYY-MM-DD').getInfo())
Export.table.toDrive({
  collection: areas,
  description: ee.Date(ee.Image(maskfirst).get('system:time_start')).format('YYYY-MM-DD').getInfo(),
  fileFormat: 'csv'
});

// A FeatureCollection with one feature per BIOME with the aggregated AREA

// // print(biomeAreas) // Print the result will cause you to run out of memory
// Export.table.toAsset(biomeAreas, 'test_biome_areas')

// Map.addLayer(clipped.select(0));
// Map.addLayer(wmask.select(0));
// Map.addLayer(Bmean.select(0) ,{palette: ['000000','00FF00','0000FF']});

// var triplets = wmask.map(function(image) {
//   return image.select('B2_median').reduceRegions({
//     collection: poly2.select(['NAME']), 
//     reducer: ee.Reducer.sum(), 
//     scale: 30}).filter(ee.Filter.neq('mean', null))
//     .map(function(f) { 
//       return f.set('imageId', image.id());
//     });
// }).flatten();
// print(triplets.first());
// Export.table.toDrive({
//   collection: triplets, 
//   description: 'shape', 
//   fileNamePrefix: 'shape',
//   fileFormat: 'CSV'
// });
// var shapesArea = ui.Chart.image.seriesByRegion({
// imageCollection: wmask, 
// regions: poly2, 
// reducer: ee.Reducer.sum(),
// scale: 30
// });

// var shapesBloom = ui.Chart.image.seriesByRegion({
// imageCollection: Bmean, 
// regions: poly2, 
// reducer: ee.Reducer.mean(),
// scale: 30
// });

// print(shapesBloom)
// var chartArea = ui.Chart.image.series(wmask, poly2, ee.Reducer.sum(), 1000,'system:time_start' );
// print(chartArea);
// var chartBloom = ui.Chart.image.series(Bmean, poly2, ee.Reducer.mean(), 1000 ,'system:time_start');
// print(chartBloom);
//var batch = require('users/fitoprincipe/geetools:batch');
//batch.Download.ImageCollection.toDrive(wmask, "wmask", {scale:30});
//batch.Download.ImageCollection.toDrive(Bmean, "Bmean", {scale:30});
